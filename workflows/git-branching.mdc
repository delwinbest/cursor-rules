---
description: Git Branching Strategy and Conventions
alwaysApply: true
---

# Git Branching Strategy

## Branch Structure

### Main Branches
- **`main`**: Production branch - only for stable, tested code
- **`development`**: Integration branch - ongoing development work

### Feature Branches
- **`feature/*`**: Feature branches for specific functionality
- **`fix/*`**: Bug fix branches for issues and problems

## Branch Naming Conventions

### Feature Branches
- Format: `feature/phase-X-description`
- Examples:
  - `feature/phase-5-drag-drop`
  - `feature/user-authentication`
  - `feature/api-integration`

### Bug Fix Branches
- Format: `fix/issue-description`
- Examples:
  - `fix/page-reload-on-card-operations`
  - `fix/memory-leak-in-modal`
  - `fix/validation-error-handling`

### General Rules
- Use kebab-case for branch names
- Include issue numbers when applicable
- Be descriptive but concise
- Avoid special characters except hyphens

## Development Workflow

### Starting New Work
1. **Ensure you're on the correct base branch**:
   ```bash
   git checkout development
   git pull origin development
   ```

2. **Create feature branch**:
   ```bash
   git checkout -b feature/your-feature-name
   ```

3. **Update project documentation** (TODO.md, etc.)
4. **Implement changes** with frequent commits
5. **Test thoroughly** before creating pull request

### Branch Management
- Always ensure local repositories are up to date before making changes
- Before making any changes to code, ensure you follow the branching strategy
- Start by making sure you are using the correct branch
- Keep branches focused on single features or fixes
- Delete merged branches to keep repository clean

## Commit Practices

### Conventional Commit Messages
- **`feat:`** for new features
- **`fix:`** for bug fixes
- **`refactor:`** for code improvements
- **`docs:`** for documentation updates
- **`style:`** for formatting changes
- **`test:`** for test additions
- **`chore:`** for maintenance tasks

### Commit Message Format
```bash
git commit -m "type: Brief description

- Detailed explanation of changes
- List specific improvements
- Include context and reasoning

Fixes #X - Link to related issue"
```

### Example Commit Messages
```bash
# Feature commit
git commit -m "feat: Add drag and drop functionality to kanban board

- Implement drag and drop for cards between columns
- Add visual feedback during drag operations
- Update column state management for reordering
- Add keyboard accessibility for drag operations

Closes #15 - Drag and drop card reordering"

# Bug fix commit
git commit -m "fix: Prevent full page reload on card operations

- Implement optimistic updates for card operations
- Remove loading states during card operations
- Add deduplication logic to prevent real-time conflicts
- Only show loading spinner on initial data fetch

Fixes #7 - Full page reload on card add/remove"
```

## Pull Request Process

### Creating Pull Requests
1. **Create pull request** from feature branch to `development`
2. **Link to GitHub issues** using `Fixes #X` or `Closes #X`
3. **Include comprehensive PR description**:
   - Summary of changes
   - Related issues
   - Testing instructions
   - Before/after comparisons
   - Code quality notes
   - Acceptance criteria checklist

### PR Review Process
4. **Wait for review and approval**
5. **Address feedback** and make necessary changes
6. **Merge to `development`** after approval
7. **Create PR from `development` to `main`** for production deployment

## Branch Protection Rules

### Development Branch
- Require pull request reviews
- Require status checks to pass
- Require branches to be up to date
- Restrict pushes to development branch

### Main Branch
- Require pull request reviews
- Require status checks to pass
- Require branches to be up to date
- Restrict pushes to main branch
- Require linear history (no merge commits)

## Hotfix Process

### Emergency Fixes
1. **Create hotfix branch** from `main`:
   ```bash
   git checkout main
   git pull origin main
   git checkout -b hotfix/critical-issue-description
   ```

2. **Implement fix** and test thoroughly
3. **Create PR** to `main` with high priority
4. **Merge to main** after approval
5. **Merge back to development**:
   ```bash
   git checkout development
   git merge main
   git push origin development
   ```

## Best Practices

### General Guidelines
- **Always work on feature branches** - never commit directly to main
- **Keep branches focused** - one feature or fix per branch
- **Write descriptive commit messages** with context
- **Test thoroughly** before merging
- **Keep branches up to date** with base branch
- **Delete merged branches** to keep repository clean

### Branch Hygiene
- Regularly sync with remote branches
- Rebase feature branches on development before merging
- Use interactive rebase to clean up commit history
- Squash related commits when appropriate

### Collaboration
- Communicate branch intentions with team
- Use descriptive branch names that explain purpose
- Link branches to issues for better tracking
- Coordinate on shared branches to avoid conflicts